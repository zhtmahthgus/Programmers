//자물쇠와 열쇠
def keyin(x,y,size,key,arr):
    for i in range(size):
        for j in range(size):
            arr[i+x][j+y] += key[i][j] 
def keyout(x,y,size,key,arr):
    for i in range(size):
        for j in range(size):
            arr[i+x][j+y] -= key[i][j] 
def check(size, middle, arr):
    for i in range(size):
        for j in range(size):
            if arr[middle+i][middle+j] != 1:
                return False
    return True
def rotate(arr):
    return list(zip(*arr[::-1]))
def solution(key, lock):
    answer = False
    size = len(lock) + 2*len(key)
    middle = len(key)
    arr = [[0 for j in range(size)] for i in range(size)]
    for i in range(len(lock)):
        for j in range(len(lock)):
            arr[middle+i][middle+j] = lock[i][j]
    for _ in range(4):
        key = rotate(key)
        for i in range(1, len(key)+len(lock)):
            for j in range(1, len(key)+len(lock)):
                keyin(i,j,len(key),key,arr)
                if(check(len(lock), middle, arr)):
                    return True
                keyout(i,j,len(key),key,arr)
    return answer